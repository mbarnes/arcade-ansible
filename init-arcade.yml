#!/usr/bin/ansible-playbook
---
#
# Builds software for a Raspberry Pi based arcade machine in a
# qemu-arm-static chroot environment.
#
# Cross-compilation is faster and helps extend the life of the
# Raspberry Pi's SD card.
#
# Then,
#
# Configures hosts in an inventory group named "arcade_group"
# consisting of real Raspberry Pi devices with networking and
# SSH service available, then installs the software built in
# the chroot environment.
#
# To run:
# init-arcade.yml -e cli_chroot_path=/path/to/chroot \
#                 -e cli_image_file=/path/to/raspbian.img
#
# To skip the build phase, add -e cli_skip_build=true.
#
# References:
# - GCC compiler optimization for ARM-based systems
#   https://gist.github.com/fm4dd/c663217935dc17f0fc73c9c81b0aa845
# - Building SFML for Raspberry Pi without X11
#   https://github.com/mickelson/sfml-pi/blob/master/readme.md
#

# PHASE 1: Prepare chroot environment
- hosts: localhost
  connection: local
  vars:
    bind_mounts:
    - proc
    - sys
    - dev

  tasks:

  - name: Check if user is root
    fail:
      msg: "This playbook must be run as root"
    when: ansible_user_uid != 0

  - name: Check for required variables
    fail:
      msg: "Variable {{ item }} is not defined"
    when: item is undefined
    loop:
    - cli_image_file
    - cli_chroot_path

  - name: Copy files from image into chroot directory
    script: "rpi_copyrootfs.sh -i {{ cli_image_file }} -d {{ cli_chroot_path }}"
    args:
      creates: "{{ cli_chroot_path }}"

  - name: Copy /etc/resolv.conf into chroot directory
    copy:
      src: /etc/resolv.conf
      dest: "{{ cli_chroot_path }}/etc/resolv.conf"
      mode: preserve

  - name: Copy qemu-arm-static into chroot directory
    copy:
      src: /usr/bin/qemu-arm-static
      dest: "{{ cli_chroot_path }}/bin/qemu-arm-static"
      mode: preserve

  - name: Create a mock shell for Ansible's chroot plugin
    copy:
      content: |
        #!/bin/sh
        /bin/qemu-arm-static /bin/sh $@
      dest: "{{ cli_chroot_path }}/bin/qemu-sh"
      mode: '0755'
      owner: root
      group: root

  - name: Check for mount points in chroot directory
    stat:
      path: "{{ cli_chroot_path }}/{{ item }}"
    loop: "{{ bind_mounts }}"
    register: mount_point_stat

  - name: Validate mount points in chroot directory
    fail:
      msg: "Missing mount point: {{ cli_chroot_path }}/{{ item.item }}"
    when: not (item.stat.exists and item.stat.isdir)
    loop: "{{ mount_point_stat.results }}"

  - name: Find existing bind mounts in chroot directory
    command: "findmnt --mountpoint {{ cli_chroot_path }}/{{ item }}"
    register: bind_mount_status
    ignore_errors: yes
    loop: "{{ bind_mounts }}"

  - name: Create missing bind mounts in chroot directory
    command: "mount --bind /{{ item.item }} {{ cli_chroot_path }}/{{ item.item }}"
    when: item.rc == 1
    loop: "{{ bind_mount_status.results }}"
    args:
      warn: false

  - name: Comment out ld.so.preload in chroot directory
    replace:
      path: "{{ cli_chroot_path }}/etc/ld.so.preload"
      regexp: '^(/.+)$'
      replace: '#\1'

  - name: Add chroot path to inventory for next play
    add_host:
      name: "{{ cli_chroot_path }}"
      groups: chroot_group
      ansible_connection: chroot
      ansible_executable: /bin/qemu-sh


# PHASE 2: Build software for ARM architecture
- hosts: chroot_group
  become: yes
  become_user: pi
  vars:
    git_base_dir: "{{ ansible_user_dir }}/git"
    sdl_git_repo_url: https://github.com/SDL-mirror/SDL.git
    sdl_git_repo_ref: release-2.0.12
    sdlttf_git_repo_url: https://github.com/SDL-mirror/SDL_ttf.git
    sdlttf_git_repo_ref: release-2.0.15
    mame_git_repo_url: https://github.com/mbarnes/mame.git
    mame_git_repo_ref: subtarget-cocktail-0231
    cmake_git_repo_url: https://gitlab.kitware.com/cmake/cmake.git
    cmake_git_repo_ref: v3.16.3  # same as cmake .deb package
    sfml_pi_git_repo_url: https://github.com/mickelson/sfml-pi.git
    sfml_pi_git_repo_ref: master
    attract_git_repo_url: https://github.com/mickelson/attract.git
    attract_git_repo_ref: master
    #raspberry_pi_cpu: cortex-a53  # Raspberry Pi 3
    raspberry_pi_cpu: cortex-a72  # Raspberry Pi 4
    raspberry_pi_cflags: >-
      -mcpu={{ raspberry_pi_cpu }}
      -mtune={{ raspberry_pi_cpu }}
      -mfloat-abi=hard
      -mfpu=neon-fp-armv8
      -mneon-for-64bits

  tasks:

  - name: Skip build if cli_skip_build requested
    meta: end_play
    when: cli_skip_build | default(false)

  - name: Install build dependencies
    apt:
      # Allow duplicates here if multiple
      # components have a common dependency.
      name:
      - git
      - build-essential
      # For SDL
      - automake
      - libasound2-dev
      - libdbus-1-dev
      - libdrm-dev
      - libfreetype6-dev
      - libgbm-dev
      - libgles2-mesa-dev
      - libudev-dev
      # For MAME
      - libasio-dev
      - libasound2-dev
      - libflac-dev
      - libfontconfig1-dev
      - libgles2-mesa-dev
      - libglm-dev
      - libglvnd-dev
      - libjpeg62-turbo-dev
      - libpulse-dev
      - libpugixml-dev
      - libsqlite3-dev
      - libutf8proc-dev
      - libxi-dev
      - rapidjson-dev
      # For SFML
      - libdrm-dev
      - libegl1-mesa-dev
      - libflac-dev
      - libfreetype6-dev
      - libgbm-dev
      - libjpeg62-turbo-dev
      - libogg-dev
      - libopenal-dev
      - libudev-dev
      - libvorbis-dev
      # For Attract-Mode
      - libarchive-dev
      - libavcodec-dev
      - libavformat-dev
      - libavresample-dev
      - libcurl4-openssl-dev
      - libdrm-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libgbm-dev
      - libglu1-mesa-dev
      - libjpeg62-turbo-dev
      - libopenal-dev
      - libswresample-dev
      - libswscale-dev
      update_cache: yes
    become: yes
    become_user: root

  - name: Create git directory
    file:
      path: "{{ git_base_dir }}"
      state: directory

  # SDL modifies its own "include/SDL_config.h" during
  # configuration.  To avoid needless recompilation on
  # future playbook runs, note the file's modification
  # time before reconfiguring the source code and then
  # restore the modification time if the file contents
  # have not changed.

  - name: Examine SDL_config.h
    stat:
      path: "{{ git_base_dir }}/SDL/include/SDL_config.h"
    register: sdl_config_h_old

  - name: Clone SDL from git
    git:
      repo: "{{ sdl_git_repo_url }}"
      dest: "{{ git_base_dir }}/SDL"
      version: "{{ sdl_git_repo_ref }}"
      depth: 1
      # Running configure creates local
      # modifications in the repository
      force: yes

  - name: Configure SDL to use OpenGL ES
    command:
      chdir: "{{ git_base_dir }}/SDL"
      argv:
      - "./configure"
      - "--host=armv7l-raspberry-linux-gnueabihf"
      - "--disable-arm-simd"
      - "--disable-esd"
      - "--disable-jack"
      - "--disable-pulseaudio"
      - "--disable-sndio"
      - "--disable-video-opengl"
      - "--disable-video-opengles1"
      - "--disable-video-rpi"
      - "--disable-video-vulkan"
      - "--disable-video-wayland"
      - "--disable-video-x11"
      - "--enable-alsa"
      - "--enable-arm-neon"
      - "--enable-video-kmsdrm"
      - "--enable-video-opengles2"

  - name: Examine SDL_config.h
    stat:
      path: "{{ sdl_config_h_old.stat.path }}"
    register: sdl_config_h_new
    when: sdl_config_h_old.stat.exists

  - name: Restore SDL_config.h modification time
    file:
      path: "{{ sdl_config_h_old.stat.path }}"
      modification_time: "{{ '%Y%m%d%H%M.%S' | strftime(sdl_config_h_old.stat.mtime) }}"
    when:
    - sdl_config_h_old.stat.exists
    - sdl_config_h_old.stat.checksum == sdl_config_h_new.stat.checksum

  - name: Build SDL from git
    make:
      chdir: "{{ git_base_dir }}/SDL"
      params:
        CFLAGS: "{{ raspberry_pi_cflags }}"
        "--jobs": "{{ ansible_processor_vcpus }}"

  - name: Install SDL as root
    make:
      chdir: "{{ git_base_dir }}/SDL"
      target: install
    become: yes
    become_user: root

  - name: Clone SDL_ttf from git
    git:
      repo: "{{ sdlttf_git_repo_url }}"
      dest: "{{ git_base_dir }}/SDL_ttf"
      version: "{{ sdlttf_git_repo_ref }}"
      depth: 1

  - name: Configure SDL_ttf
    command:
      chdir: "{{ git_base_dir }}/SDL_ttf"
      argv:
      - "./configure"

  - name: Build SDL_ttf from git
    make:
      chdir: "{{ git_base_dir }}/SDL_ttf"
      params:
        "--jobs": "{{ ansible_processor_vcpus }}"

  - name: Install SDL_ttf as root
    make:
      chdir: "{{ git_base_dir }}/SDL_ttf"
      target: install
    become: yes
    become_user: root

  - name: Run ldconfig as root
    command: /sbin/ldconfig
    become: yes
    become_user: root

  - name: Clone MAME from git
    git:
      repo: "{{ mame_git_repo_url }}"
      dest: "{{ git_base_dir }}/mame"
      version: "{{ mame_git_repo_ref }}"
      # Depth should be sufficient to cover all
      # my customizations for SUBTARGET=cocktail.
      depth: 40

  - name: Build MAME from git (this can take a LONG time)
    make:
      chdir: "{{ git_base_dir }}/mame"
      params:
        "--jobs": "{{ ansible_processor_vcpus }}"
        REGENIE: 1
        NOWERROR: 1
        IGNORE_GIT: 1
        TARGETOS: linux
        ARCHOPTS: "{{ raspberry_pi_cflags }}"
        NO_USE_XINPUT: 1
        USE_SYSTEM_LIB_ASIO: 1
        USE_SYSTEM_LIB_EXPAT: 1
        USE_SYSTEM_LIB_ZLIB: 1
        USE_SYSTEM_LIB_JPEG: 1
        USE_SYSTEM_LIB_FLAC: 1
        USE_SYSTEM_LIB_SQLITE3: 1
        USE_SYSTEM_LIB_UTF8PROC: 1
        USE_SYSTEM_LIB_GLM: 1
        USE_SYSTEM_LIB_RAPIDJSON: 1
        USE_SYSTEM_LIB_PUGIXML: 1

  - name: Install MAME binary as root
    copy:
      src: "{{ git_base_dir }}/mame/mamecocktail"
      dest: /usr/local/bin/mamecocktail
      remote_src: yes
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: root
    become: yes
    become_user: root

  # FIXME The copy module's remote_src supports recursive copying
  #       as of Ansible 2.8.  In the meantime, use the cp command.

  # FIXME This can be removed for Ansible 2.8.
  - name: Create MAME directory as root
    file:
      path: /usr/local/games/mame
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: root
    become: yes
    become_user: root

  # FIXME Use the copy module for Ansible 2.8.
  - name: Install MAME plugins as root
    command: "cp --recursive {{ git_base_dir }}/mame/plugins /usr/local/games/mame"
    #copy:
    #  src: "{{ git_base_dir }}/mame/plugins"
    #  dest: /usr/local/games/mame
    #  remote_src: yes
    #  mode: preserve
    become: yes
    become_user: root

  # FIXME This can be removed for Ansible 2.8.
  - name: Set ownership of MAME plugins to root
    file:
      path: /usr/local/games/mame/plugins
      state: directory
      recurse: yes
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: root
    become: yes
    become_user: root

  # XXX The packaged cmake is not configured with _FILE_OFFSET_BITS=64,
  #     and causes all manner of problems in this emulated environment.
  #     Build the same version as the package but with the correction.
  - name: Clone cmake from git
    git:
      repo: "{{ cmake_git_repo_url }}"
      dest: "{{ git_base_dir }}/cmake"
      version: "{{ cmake_git_repo_ref }}"
      depth: 1

  - name: Bootstrap cmake with Large File Support (LFS)
    command:
      chdir: "{{ git_base_dir }}/cmake"
      argv:
      - "./bootstrap"
      - "--parallel={{ ansible_processor_vcpus }}"
      - "--system-curl"
    environment:
      CXXFLAGS: "-D_FILE_OFFSET_BITS=64"

  - name: Build cmake from git
    make:
      chdir: "{{ git_base_dir }}/cmake"
      params:
        "--jobs": "{{ ansible_processor_vcpus }}"

  - name: Install cmake as root
    make:
      chdir: "{{ git_base_dir }}/cmake"
      target: install
    become: yes
    become_user: root

  - name: Clone SFML for the Raspberry Pi from git
    git:
      repo: "{{ sfml_pi_git_repo_url }}"
      dest: "{{ git_base_dir }}/sfml-pi"
      version: "{{ sfml_pi_git_repo_ref }}"
      depth: 1

  - name: Prepare SFML for the Raspberry Pi sources
    command:
      chdir: "{{ git_base_dir }}/sfml-pi"
      argv:
        - "cmake"
        - "-DSFML_DRM=1"
        - "."

  - name: Build SFML for the Raspberry Pi from git
    make:
      chdir: "{{ git_base_dir }}/sfml-pi"
      params:
        "--jobs": "{{ ansible_processor_vcpus }}"

  - name: Install SFML for the Raspberry Pi as root
    make:
      chdir: "{{ git_base_dir }}/sfml-pi"
      target: install
    become: yes
    become_user: root

  - name: Clone Attract-Mode from git
    git:
      repo: "{{ attract_git_repo_url }}"
      dest: "{{ git_base_dir }}/attract"
      version: "{{ attract_git_repo_ref }}"
      depth: 1

  - name: Build Attract-Mode from git
    make:
      chdir: "{{ git_base_dir }}/attract"
      params:
        "--jobs": "{{ ansible_processor_vcpus }}"
        USE_DRM: 1
        USE_MMAL: 1

  - name: Install Attract-Mode as root
    make:
      chdir: "{{ git_base_dir }}/attract"
      target: install
      params:
        USE_DRM: 1
        USE_MMAL: 1
    become: yes
    become_user: root


# PHASE 3: Configure Raspberry Pi hosts
- hosts: arcade_group
  remote_user: pi

  vars:
  - mame_ini_dir: "{{ ansible_user_dir }}/.mame"
  - boot_cmdline:
    # Kernel parameter documentation:
    # https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/kernel-parameters.txt
    # Common Raspberry Pi kernel parameters:
    # https://www.raspberrypi.org/documentation/configuration/cmdline-txt.md
    - console=serial0,115200
    - console=tty3
    - root=/dev/mmcblk0p2
    - rootfstype=ext4
    - elevator=deadline
    - fsck.repair=yes
    - rootwait
    - quiet
    # Disable Raspberry Pi logo
    - logo.nologo
    # Remove cursor on virtual terminals
    - vt.global_cursor_default=0
    # Rotate the HDMI 1 display 90 degrees
    # Resolution agrees with hdmi_mode below.
    - video=HDMI-A-1:1024x768M@60,rotate=90
    # Disable console blank timer
    - consoleblank=0
  - config_txt_changes:
    # Necessary for my VGA arcade monitor (needs HDMI adapter)
    - option: hdmi_force_hotplug
      value: 1
    # hdmi_group: DMT / hdmi_mode: 1024x768 60 Hz
    - option: hdmi_group
      value: 2
    - option: hdmi_mode
      value: 16
    # Disable rainbow splash screen on boot
    - option: disable_splash
      value: 1
    # Enable Fake Kernel Mode Setting (FKMS) driver
    - section: all
      option: dtoverlay
      value: vc4-fkms-v3d

  tasks:

  - name: System-level tasks
    become: yes
    block:

    - name: Set hostname to arcade
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Update 127.0.1.1 hosts entry
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: "127.0.1.1\t{{ inventory_hostname }}"

    - name: Configure kernel parameters
      copy:
        content: "{{ boot_cmdline | join(' ') }}"
        dest: /boot/cmdline.txt
        mode: '0755'
        owner: root
        group: root

    - name: Uncomment select Raspberry Pi options
      lineinfile:
        path: /boot/config.txt
        regexp: '^#({{ item }}=.*)'
        line: "\\g<1>"
        backrefs: yes
      loop:
      - hdmi_force_hotplug
      - hdmi_group
      - hdmi_mode

    - name: Configure Raspberry Pi options
      ini_file:
        path: /boot/config.txt
        section: "{{ item.section | default(None) }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        no_extra_spaces: yes
      loop: "{{ config_txt_changes }}"

    - name: Add user to "render" group
      user:
        name: "{{ ansible_ssh_user }}"
        groups: render
        append: yes

    - name: Create /etc/asound.conf
      copy:
        content: |
          # Default to bcm2835 Headphones card
          defaults.pcm.card 1
          defaults.ctl.card 1
        dest: /etc/asound.conf

    - name: Install required packages
      package:
        name:
        - linux-cpupower
        - tmux
        - vim
        # For MAME
        - libegl1
        - libgles2
        - libpugixml1v5
        - libutf8proc2
        # For Attract-Mode
        - libarchive13
        - libavformat58
        - libgbm1
        - libopenal1
        - libswscale5
        state: present

    # This task is for removing obsolete dependency
    # packages from previously installed MAME builds.
    - name: Remove obsolete packages
      package:
        name:
        - libuv1
        state: absent

    - name: Set CPU frequency govenor to "performance"
      command: cpupower frequency-set --governor performance

    - name: Configure systemd to launch Attract-Mode
      copy:
        src: attract.conf
        dest: /etc/systemd/system/getty@tty1.service.d/

    - name: Synchronize locally installed software
      synchronize:
        src: "{{ cli_chroot_path }}/usr/local/"
        dest: /usr/local

    - name: Run ldconfig on new libraries
      command: ldconfig /usr/local/lib

    # End of block

  - name: Create MAME directory structure
    file:
      path: "{{ ansible_user_dir }}/{{ item }}"
      state: directory
    loop:
    - mame
    - mame/auxroms
    - mame/cfg
    - mame/dats
    - mame/flyers
    - mame/hi
    - mame/roms
    - mame/samples
    - mame/snaps
    - mame/videos

  - name: Synchronize home directory files
    synchronize:
      src: home/
      dest: "{{ ansible_user_dir }}"

  - name: Create mame directory
    file:
      path: "{{ mame_ini_dir }}"
      state: directory

  - name: Generate default mame configuration
    command: /usr/local/bin/mamecocktail -createconfig
    args:
      chdir: "{{ mame_ini_dir }}"

  - name: Customize mame configuration (mame.ini)
    lineinfile:
      path: "{{ mame_ini_dir }}/mame.ini"
      regexp: "^({{ item.key }}\\s+)"
      line: "\\g<1>{{ item.value }}"
      backrefs: yes
    loop:
    - key: autorol
      value: 1
    - key: pluginspath
      value: /usr/local/games/mame/plugins
    - key: rompath
      value: roms;auxroms
    - key: skip_gameinfo
      value: 1
    - key: video
      value: accel
    - key: waitvsync
      value: 1

  - name: Customize mame configuration (plugin.ini)
    lineinfile:
      path: "{{ mame_ini_dir }}/plugin.ini"
      regexp: "^({{ item.key }}\\s+)"
      line: "\\g<1>{{ item.value }}"
      backrefs: yes
    loop:
    - key: hiscore
      value: 1

  - name: Generate romlist for mame (first time only)
    command: /usr/local/bin/attract --build-romlist mame
    args:
      creates: "{{ ansible_user_dir }}/.attract/romlists/mame.txt"
    register: attract_build_romlist
    # XXX Attract-Mode's C++ code for this routine returns a
    #     bool, which is (incorrectly) used as the exit code.
    failed_when:
    - attract_build_romlist.changed
    - attract_build_romlist.rc != 1

  - name: Scrape artwork for mame (first time only)
    command: /usr/local/bin/attract --scrape-art mame
    when: attract_build_romlist.changed
    register: attract_scrape_art
    # XXX Attract-Mode's C++ code for this routine returns a
    #     bool, which is (incorrectly) used as the exit code.
    failed_when:
    - attract_scrape_art.changed
    - attract_scrape_art.rc != 1
    # Ignore any scraping errors since it's non-critical and
    # depends on 3rd party services which may be unavailable.
    ignore_errors: yes
